---
format: gfm
execute: 
  message: false
  warning: false
knitr:
  opts_chunk:
    fig.path: "man/figures/README-"
---

<!-- badges: start -->
[![R-CMD-check](https://github.com/Robinlovelace/spanish_od_data/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/Robinlovelace/spanish_od_data/actions/workflows/R-CMD-check.yaml)
<!-- badges: end -->

This repo demonstrates how to download and use OD data from Spain, published by [transportes.gob.es](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudios-de-movilidad-con-big-data/opendata-movilidad)

The data is provided as follows:

- Estudios basicos
    - Por disitritos
      - Personas (population)
      - Pernoctaciones (overnight stays)
      - Viajes
        - ficheros-diarios
        - meses-completos

The package is designed to save people time by providing the data in analyis-ready formats.
Automating the process of downloading, cleaning and importing the data can also reduce the risk of errors in the laborious process of data preparation.

The datasets are large, so the package aims to reduce computational resources, by using computationally efficient packages behind the scenes.
If you want to use many of the data files, it's recommended you set a data directory where the package will look for the data, only downloading the files that are not already present.

# Installation

Install the package as follows:

```{r}
if (!require("remotes")) install.packages("remotes")
remotes::install_github("Robinlovelace/spanishoddata")
```

Load it as follows:

```{r}
library(spanishoddata)
```

Local development: to load the package locally, clone it and navigate to the root of the package in the terminal, e.g. with the following:

```bash
gh repo clone Robinlovelace/spanishoddata
code spanishoddata
```

then run the following command from the R console:

```{r}
#| eval: false
devtools::load_all()
```

# Setting the data directory

You can specify the data directory globally by setting the `SPANISH_OD_DATA_DIR` environment variable, e.g. with the following command:

```{r}
#| eval: false
usethis::edit_r_environ()
# Then set the data directory globally, by typing this line in the file:
```

```
SPANISH_OD_DATA_DIR = "/path/to/data"
```

You can also set the data directory in the local folder by editing a local `.Renviron` file in the root of the project:

```{r}
#| eval: false
file.edit(".Renviron")
```

Finally, you can set the data directory in the current R session as follows:

```{r}
#| eval: false
Sys.setenv(SPANISH_OD_DATA_DIR = "/path/to/data")
```

# Using the package

To run the code in this README we will use the following setup:

```{r}
#| label: pkgs
library(duckdb)
library(tidyverse)
theme_set(theme_minimal())
sf::sf_use_s2(FALSE)
```

```{r}
#| include: false
remotes::install_github("r-tmap/tmap")
```

Get metadata for the datasets as follows:

```{r}
#| label: metadata
metadata = spod_available_data_v2()
metadata
```

## Zones

Zones can be downloaded as follows:

```{r}
#| label: distritos
distritos = spod_get_zones(type = "distritos")
distritos_wgs84 = sf::st_transform(distritos, 4326)
plot(distritos_wgs84)
```

## Estudios basicos

Each day in the `ficheros-diarios` folder contains a file with the following columns:

```{r}
#| label: ficheros-diarios-example
# set timeout for downloads
options(timeout = 600) # 10 minutes
u1 = "https://movilidad-opendata.mitma.es/estudios_basicos/por-distritos/viajes/ficheros-diarios/2024-03/20240301_Viajes_distritos.csv.gz"
f1 = basename(u1)
if (!file.exists(f1)) {
  download.file(u1, f1)
}
drv = duckdb::duckdb("daily.duckdb")
con = DBI::dbConnect(drv)
od1 = duckdb::tbl_file(con, f1)
# colnames(od1)
#  [1] "fecha"                   "periodo"                
#  [3] "origen"                  "destino"                
#  [5] "distancia"               "actividad_origen"       
#  [7] "actividad_destino"       "estudio_origen_posible" 
#  [9] "estudio_destino_posible" "residencia"             
# [11] "renta"                   "edad"                   
# [13] "sexo"                    "viajes"                 
# [15] "viajes_km"
od1_head = od1 |>
  head() |>
  collect()
od1_head |>
  knitr::kable()
DBI::dbDisconnect(con)
```

You can get the same result, but for multiple files, as follows:

```{r}
od_multi_list = spod_get(
  subdir = "estudios_basicos/por-distritos/viajes/ficheros-diarios",
  date_regex = "2024030[1-7]"
)
od_multi_list[[1]]
class(od_multi_list[[1]])
```

The result is a list of duckdb tables which load almost instantly, and can be used with dplyr functions.
Let's do an aggregation to find the total number trips per hour over the 7 days:

```{r}
#| label: trips-per-hour
n_per_hour = od_multi_list |>
  map(~ .x |>
        group_by(periodo, fecha) |>
        summarise(n = n(), Trips = sum(viajes)) |>
        collect()
  ) |>
  list_rbind() |>
  mutate(Time = lubridate::ymd_h(paste0(fecha, periodo))) |>
  mutate(Day = lubridate::wday(Time, label = TRUE)) 
n_per_hour |>
  ggplot(aes(x = Time, y = Trips)) +
  geom_line(aes(colour = Day)) +
  labs(title = "Number of trips per hour over 7 days")
```

The figure above summarises `r format(sum(n_per_hour$Trips), big.mark = ",")` trips over the 7 days associated with `r format(sum(n_per_hour$n), big.mark = ",")` records.

# Desire lines

We'll use the same input data to pick-out the most important flows in Spain, with a focus on longer trips for visualisation:

```{r}
od_large = od_multi_list |>
  map(~ .x |>
        group_by(origen, destino) |>
        summarise(Trips = sum(viajes), .groups = "drop") |>
        filter(Trips > 500) |>
        collect()
  ) |>
  list_rbind() |>
  group_by(origen, destino) |>
  summarise(Trips = sum(Trips)) |>
  arrange(desc(Trips))
od_large
```

The results show that the largest flows are intra-zonal.
Let's keep only the inter-zonal flows:

```{r}
od_large_interzonal = od_large |>
  filter(origen != destino)
```

We can convert these to geographic data with the {od} package:

```{r}
#| label: desire-lines
od_large_interzonal_sf = od::od_to_sf(
  od_large_interzonal,
  z = distritos_wgs84
)
od_large_interzonal_sf |>
  ggplot() +
  geom_sf(aes(size = Trips), colour = "red") +
  theme_void()
```

Let's focus on trips in and around a particular area (Salamanca):

```{r}
#| label: salamanca-zones
salamanca_zones = zonebuilder::zb_zone("Salamanca")
distritos_salamanca = distritos_wgs84[salamanca_zones, ]
plot(distritos_salamanca)
```

We will use this information to subset the rows, to capture all movement within the study area:

```{r}
#| label: salamanca
ids_salamanca = distritos_salamanca$ID
od_salamanca = od_multi_list |>
  map(~ .x |>
        filter(origen %in% ids_salamanca) |>
        filter(destino %in% ids_salamanca) |>
        collect()
  ) |>
  list_rbind() |>
  group_by(origen, destino) |>
  summarise(Trips = sum(viajes)) |>
  arrange(Trips)

```

Let's plot the results:

```{r}
#| label: salamanca-plot
od_salamanca_sf = od::od_to_sf(
  od_salamanca,
  z = distritos_salamanca
)
od_salamanca_sf |>
  filter(origen != destino) |>
  ggplot() +
  geom_sf(aes(colour = Trips), size = 1) +
  scale_colour_viridis_c() +
  theme_void()

```

# Disaggregating desire lines

For this you'll need some additional dependencies:

```{r}
library(sf)
library(tmap)
```

We'll get the road network from OSM:

```{r}
#| results: hide
salamanca_boundary = sf::st_union(distritos_salamanca)
osm_full = osmactive::get_travel_network(salamanca_boundary)
```

```{r}
#| label: osm
osm = osm_full[salamanca_boundary, ]
drive_net = osmactive::get_driving_network(osm)
drive_net_major = osmactive::get_driving_network_major(osm)
cycle_net = osmactive::get_cycling_network(osm)
cycle_net = osmactive::distance_to_road(cycle_net, drive_net_major)
cycle_net = osmactive::classify_cycle_infrastructure(cycle_net)
map_net = osmactive::plot_osm_tmap(cycle_net)
map_net
```

We can use the road network to disaggregate the desire lines:

```{r}
od_jittered = odjitter::jitter(
  od_salamanca_sf,
  zones = distritos_salamanca,
  subpoints = drive_net,
  disaggregation_threshold = 1000,
  disaggregation_key = "Trips"
)
```

Let's plot the disaggregated desire lines:

```{r}
#| label: disaggregated
od_jittered |>
  arrange(Trips) |>
  ggplot() +
  geom_sf(aes(colour = Trips), size = 1) +
  scale_colour_viridis_c() +
  geom_sf(data = drive_net_major, colour = "black") +
  theme_void()
```


```{r}
#| eval: false
#| echo: false
#| label: repo-setup
# Create data-raw and data folders
usethis::use_data_raw()
usethis::use_description()
usethis::use_r("get.R")
usethis::use_package("glue")
usethis::use_package("xml2")
#     ‘fs’ ‘lubridate’ ‘stringr’
usethis::use_package("fs")
usethis::use_package("lubridate")
usethis::use_package("stringr")
devtools::check()
# Set-up pkgdown + ci
usethis::use_pkgdown()
usethis::use_github_action("pkgdown")
# Setup gh pages:
usethis::use_github_pages()
# Auto-style with styler
styler::style_pkg()
```

```{r}
#| eval: false
#| include: false
# Testing other datasets:
u = "https://movilidad-opendata.mitma.es/estudios_completos/por-distritos/movilidad_obligada/meses-completos/202201_Movilidad_obligada_distritos.csv.gz"
f = basename(u)
if (!file.exists(f)) {
  download.file(u, f)
}
drv = duckdb::duckdb("movilidad.duckdb")
con = DBI::dbConnect(drv)
od1 = duckdb::tbl_file(con, f)
od1_head = od1 |>
  head() |>
  collect()
# close connection:
DBI::dbDisconnect(con)
# # A tibble: 6 × 8
#      mes origen destino  edad  sexo   residencia recurrencia personas
#    <dbl> <chr>  <chr>    <chr> <chr>  <chr>      <chr>          <dbl>
# 1 202201 01001  01002    NA    NA     01         1-2             4.41
# 2 202201 01001  01002    0-25  hombre 01         5-7            11   
# 3 202201 01001  01004_AM NA    NA     01         1-2             4.39
# 4 202201 01001  01009_AM 0-25  mujer  01         1-2           145.  
# 5 202201 01001  01009_AM 25-45 mujer  01         1-2           120.  
# 6 202201 01001  01009_AM 45-65 mujer  01         1-2           119.  
od1_full = od1 |>
  collect()
table(od1_full$recurrencia)
od1_head |>
  knitr::kable()
```