---
format: gfm
bibliography: vignettes/references.bib
execute: 
  message: false
  warning: false
# knitr:
#   opts_chunk:
#     fig.path: "man/figures/README-"
eval: false
---

<!-- badges: start -->
[![R-CMD-check](https://github.com/Robinlovelace/spanish_od_data/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/Robinlovelace/spanish_od_data/actions/workflows/R-CMD-check.yaml)
<!-- badges: end -->

**spanishoddata** is an R package that provides functions for downloading and formatting Spanish origin-destination (OD) data from the Ministry of Transport and Sustainable Mobility of Spain.

It supports the two versions of the Spanish OD data. [The first version](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudios-de-movilidad-con-big-data/estudios-de-movilidad-anteriores/covid-19/opendata-movilidad) covers data from 2020 and 2021, including the period of the COVID-19 pandemic. [The second version](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudios-de-movilidad-con-big-data/opendata-movilidad) contains data from January 2022 onwards and is updated monthly on the fifteenth of each month. Both versions of the data primarily consist of mobile phone positioning data, and include matrices for overnight stays, individual movements, and trips of Spanish residents at different geographical levels.

**spanishoddata** is designed to save people time by providing the data in analysis-ready formats. Automating the process of downloading, cleaning, and importing the data can also reduce the risk of errors in the laborious process of data preparation. It also reduces computational resources by using computationally efficient packages behind the scenes. To effectively work with multiple data files, it’s recommended you set up a data directory where the package can search for the data and download only the files that are not already present.


# Installation

Install the package as follows:

```{r}
if (!require("remotes")) install.packages("remotes")
remotes::install_github("Robinlovelace/spanishoddata")
```

Load it as follows:

```{r}
library(spanishoddata)
```



Local development: to load the package locally, clone it and navigate to the root of the package in the terminal, e.g. with the following:

```bash
gh repo clone Robinlovelace/spanishoddata
code spanishoddata
```

Then run the following command from the R console:

```{r}
#| eval: true
devtools::load_all()
```

# Setting the data directory

You can specify the data directory globally by setting the `SPANISH_OD_DATA_DIR` environment variable, e.g. with the following command:

```{r}
#| eval: false
usethis::edit_r_environ()
# Then set the data directory globally, by typing this line in the file:
```

```
SPANISH_OD_DATA_DIR = "/path/to/data"
```

You can also set the data directory locally or on a per session basis as described below.

<details>

Set the 'envar' in the working directory by editing `.Renviron` file in the root of the project:

```{r}
#| eval: false
file.edit(".Renviron")
```

Finally, you can set the data directory in the current R session as follows:

```{r}
#| eval: false
Sys.setenv(SPANISH_OD_DATA_DIR = "/path/to/data")
```

</details>

# Using the package

![The overview of how to use the pacakge functions to get the data](vignettes/media/package-functions-overview.svg){ width=120% height=120%}

To run the code in this README we will use the following setup:

```{r}
#| label: pkgs
library(tidyverse)
theme_set(theme_minimal())
sf::sf_use_s2(FALSE)
```

```{r}
#| include: false
remotes::install_github("r-tmap/tmap")
```

Get metadata for the datasets as follows (we are using version 2 data covering years 2022 and onwards):

```{r}
#| label: metadata
metadata <- spod_available_data(ver = 2) # for version 2 of the data
metadata
```

## Zones

Zones can be downloaded as follows:

```{r}
#| label: distritos
distritos <- spod_get_zones("distritos", ver = 2)
distritos_wgs84 <- distritos |>
  sf::st_simplify(dTolerance = 200) |>
  sf::st_transform(4326)
plot(sf::st_geometry(distritos_wgs84))
```

![](man/figures/README-distritos-1.png)

## OD data

```{r}
od_db <- spod_get(
  type = "origin-destination",
  zones = "districts",
  dates = c(start = "2024-03-01", end = "2024-03-07")
)
class(od_db)
colnames(od_db)
```


The result is an R database interface object (`tbl_dbi`) that can be used with dplyr functions and SQL queries 'lazily', meaning that the data is not loaded into memory until it is needed.
Let's do an aggregation to find the total number trips per hour over the 7 days:

```{r}
#| label: trips-per-hour
n_per_hour <- od_db |>
  group_by(date, time_slot) |>
  summarise(n = n(), Trips = sum(n_trips)) |>
  collect() |>
  mutate(Time = lubridate::ymd_h(paste0(date, time_slot, sep = " "))) |>
  mutate(Day = lubridate::wday(Time, label = TRUE))
n_per_hour |>
  ggplot(aes(x = Time, y = Trips)) +
  geom_line(aes(colour = Day)) +
  labs(title = "Number of trips per hour over 7 days")
```

![](man/figures/README-trips-per-hour-1.png)


The figure above summarises 925,874,012 trips over the 7 days associated with 135,866,524 records.


To highlight the benefits of the package, here is how you would do this manually:

- download the [xml](https://movilidad-opendata.mitma.es/RSS.xml) file with the download links

- parse this xml to extract the download links

- write a script to download the files and locate them on disk in a logical manner

- figure out the data structure of the downloaded files, read the codebook

- translate the data (columns and values) into English, if you are not familiar with Spanish

- write a script to load the data into the database or figure out a way to claculate summaries on multiple files

- and much more...

We did all of that for you and present you with a few simple functions that get you straight to the data in one line of code, and you are ready to run any analysis on it.


# Desire lines

We'll use the same input data to pick-out the most important flows in Spain, with a focus on longer trips for visualisation:

```{r}
od_national_aggregated <- od_db |>
  group_by(id_origin, id_destination) |>
  summarise(Trips = sum(n_trips), .groups = "drop") |>
  filter(Trips > 500) |>
  collect() |>
  arrange(desc(Trips))
od_national_aggregated
```

The results show that the largest flows are intra-zonal.
Let's keep only the inter-zonal flows:

```{r}
od_national_interzonal <- od_national_aggregated |>
  filter(id_origin != id_destination)
```

We can convert these to geographic data with the {od} package [@lovelace_od_2024]:

```{r}
#| label: desire-lines
od_national_sf <- od::od_to_sf(
  od_national_interzonal,
  z = distritos_wgs84
)
distritos_wgs84 |>
  ggplot() +
  geom_sf(aes(fill = population)) +
  geom_sf(data = spData::world, fill = NA, colour = "black") +
  geom_sf(aes(size = Trips), colour = "blue", data = od_national_sf) +
  coord_sf(xlim = c(-10, 5), ylim = c(35, 45)) +
  theme_void()
```

![](man/figures/README-desire-lines-1.png)

Let's focus on trips in and around a particular area (Salamanca):

```{r}
#| label: salamanca-zones
salamanca_zones <- zonebuilder::zb_zone("Salamanca")
distritos_salamanca <- distritos_wgs84[salamanca_zones, ]
plot(distritos_salamanca)
```

![](man/figures/README-salamanca-zones-1.png)

We will use this information to subset the rows, to capture all movement within the study area:

```{r}
#| label: salamanca
ids_salamanca <- distritos_salamanca$id
od_salamanca <- od_national_sf |>
  filter(id_origin %in% ids_salamanca) |>
  filter(id_destination %in% ids_salamanca) |>
  arrange(Trips)
```

Let's plot the results:

```{r}
#| label: salamanca-plot
od_salamanca_sf <- od::od_to_sf(
  od_salamanca,
  z = distritos_salamanca
)
ggplot() +
  geom_sf(fill = "grey", data = distritos_salamanca) +
  geom_sf(aes(colour = Trips), size = 1, data = od_salamanca_sf) +
  scale_colour_viridis_c() +
  theme_void()
```

![](man/figures/README-salamanca-plot-1.png)

# Further information

For more information on the package, see:

- The [pkgdown site](https://robinlovelace.github.io/spanishoddata/)
  - Information on the [functions](https://robinlovelace.github.io/spanishoddata/reference/index.html)
  - The [v1 vs v2 vignette](https://robinlovelace.github.io/spanishoddata/articles/work-with-v1-data.html) which explains the differences between the two versions of the data
  - The [uses vignette](https://robinlovelace.github.io/spanishoddata/articles/uses.html) which documents use cases


```{r}
#| label: repo-setup
#| eval: false
#| echo: false
# Create data-raw and data folders
usethis::use_data_raw()
usethis::use_description()
usethis::use_r("get.R")
usethis::use_package("glue")
usethis::use_package("xml2")
#     ‘fs’ ‘lubridate’ ‘stringr’
usethis::use_package("fs")
usethis::use_package("lubridate")
usethis::use_package("stringr")
devtools::check()
# Set-up pkgdown + ci
usethis::use_pkgdown()
usethis::use_github_action("pkgdown")
# Setup gh pages:
usethis::use_github_pages()
# Auto-style with styler
styler::style_pkg()
usethis::use_tidy_description()
# Create new vignette called 'uses' with the title "Use cases":
usethis::use_vignette("uses", title = "Use cases")
```

# References





<!-- metadata for better search engine indexing -->
<!-- should be picked up by pkgdown -->
<!-- update metadata before release with  -->
<!-- cffr::cff_write() -->
<!-- codemetar::write_codemeta(write_minimeta = T) -->

```{r}
#| eval: true
#| include: false
is_html <- knitr::is_html_output()
```


```{r results="asis", eval = !is_html, include = !is_html, include = FALSE}
glue::glue('<script type="application/ld+json">
      {glue::glue_collapse(readLines("inst/schemaorg.json"), sep = "\n")}
    </script>')
```
