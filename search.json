[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 spanishoddata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/work-with-v1-data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Working with v1 MITMA data","text":"v1 data, Ministerio de Transportes, Movilidad y Agenda Urbana (MITMA) covers period 2020-02-14 2021-05-09.","code":""},{"path":"/articles/work-with-v1-data.html","id":"set-a-directory-to-store-the-data","dir":"Articles","previous_headings":"","what":"Set a directory to store the data","title":"Working with v1 MITMA data","text":"","code":"Sys.setenv(SPANISH_OD_DATA_DIR = \"path/to/store/data\") spod_get_data_dir() # you may want to check that it is set correctly"},{"path":"/articles/work-with-v1-data.html","id":"get-the-zones","dir":"Articles","previous_headings":"","what":"Get the zones","title":"Working with v1 MITMA data","text":"Load spatial data districts. Load spatial data municipalities.","code":"districts <- spod_get_zones_v1(zones = \"dist\", quiet = TRUE) glimpse(districts) plot(st_geometry(districts)) municipalities <- spod_get_zones_v1(zones = \"muni\", quiet = TRUE) glimpse(municipalities) plot(st_geometry(municipalities))"},{"path":"/articles/work-with-v1-data.html","id":"get-the-origin-destination-data-for-an-inteval-of-dates","dir":"Articles","previous_headings":"","what":"Get the origin-destination data for an inteval of dates","title":"Working with v1 MITMA data","text":"Load data period 2020-02-14 2020-02-17. data cached directory set SPANISH_OD_DATA_DIR environment variable. already downloaded, downloaded . Look data structure. lazy table DuckDB backend. , files disk still raw gzipped CSV files, cleverly connected dynamic view -memory DuckDB database. can work using dplyr verbs regular data frame, want load results memory, can use collect() function. example, code execute query, create another “lazy” object, executes instantly. fact “lazy” object SQL query attached . can see query show_query() function. data loaded memory yet: Use collect() function import object memory (global environment). can added either end original pipeline, like : can just add collect() “lazy” object created , like : Now data memory consuming computational resources (around 10 MB case ’ve aggregated data, removing hour--hour detail): disconnect -memory database, can use DBI::dbDisconnect() function.","code":"od_dist_1 <- spod_get_od_v1(   zones = \"dist\",   dates = c(start = \"2020-02-14\", end = \"2020-02-17\"),   quiet = TRUE ) od_dist_1 |>   glimpse() od_dist_1_lazy <- od_dist_1 |>   group_by(id_origin, id_destination, full_date) |>   summarise(     total_day_trips = sum(n_trips, na.rm = TRUE),     .groups = \"drop\"   ) |>   group_by(id_origin, id_destination) |>   summarise(     mean_dayly_trips = mean(total_day_trips, na.rm = TRUE),     .groups = \"drop\"   ) od_dist_1_lazy |>   show_query() format(object.size(od_dist_1_lazy), units = \"Mb\") class(od_dist_1_lazy) od_dist_1_data <- od_dist_1 |>   group_by(id_origin, id_destination, full_date) |>   summarise(     total_day_trips = sum(n_trips, na.rm = TRUE),     .groups = \"drop\"   ) |>   group_by(id_origin, id_destination) |>   summarise(     mean_dayly_trips = mean(total_day_trips, na.rm = TRUE),     .groups = \"drop\"   ) |>   collect() od_dist_1_data <- od_dist_1_lazy |>   collect() format(object.size(od_dist_1_data), units = \"Mb\") class(od_dist_1_data) DBI::dbDisconnect(od_dist_1$src$con)"},{"path":"/articles/work-with-v1-data.html","id":"get-the-origin-destination-data-for-several-non-consecutive-dates","dir":"Articles","previous_headings":"","what":"Get the origin-destination data for several non-consecutive dates","title":"Working with v1 MITMA data","text":"time let’s get data 2020-02-14, 2020-02-17, 2021-05-07 2021-05-09. use municipalities zones. Look data structure.","code":"od_muni_1 <- spod_get_od_v1(   zones = \"muni\",   dates = c(\"2020-02-14\", \"2020-02-17\", \"2021-05-07\", \"2021-05-09\"),   quiet = TRUE ) od_muni_1 |>   glimpse() format(object.size(od_muni_1), units = \"Mb\") class(od_muni_1) DBI::dbDisconnect(od_muni_1$src$con)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Egor Kotov. Author, maintainer. Robin Lovelace. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kotov E, Lovelace R (2024). spanishoddata: Get Spanish Origin-Destination Data. R package version 0.0.0.9000.","code":"@Manual{,   title = {spanishoddata: Get Spanish Origin-Destination Data},   author = {Egor Kotov and Robin Lovelace},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Get Spanish Origin-Destination Data","title":"Get Spanish Origin-Destination Data","text":"Install package follows: Load follows: Local development: load package locally, clone navigate root package terminal, e.g. following: run following command R console:","code":"if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"Robinlovelace/spanishoddata\") library(spanishoddata) gh repo clone Robinlovelace/spanishoddata code spanishoddata devtools::load_all()"},{"path":"/index.html","id":"setting-the-data-directory","dir":"","previous_headings":"","what":"Setting the data directory","title":"Get Spanish Origin-Destination Data","text":"can specify data directory globally setting SPANISH_OD_DATA_DIR environment variable, e.g. following command: can also set data directory local folder editing local .Renviron file root project: Finally, can set data directory current R session follows:","code":"usethis::edit_r_environ() # Then set the data directory globally, by typing this line in the file: SPANISH_OD_DATA_DIR = \"/path/to/data\" file.edit(\".Renviron\") Sys.setenv(SPANISH_OD_DATA_DIR = \"/path/to/data\")"},{"path":"/index.html","id":"using-the-package","dir":"","previous_headings":"","what":"Using the package","title":"Get Spanish Origin-Destination Data","text":"run code README use following setup: Get metadata datasets follows:","code":"library(duckdb) library(tidyverse) theme_set(theme_minimal()) sf::sf_use_s2(FALSE) metadata = spod_get_metadata() metadata # A tibble: 9,442 × 6    target_url           pub_ts              file_extension data_ym data_ymd      <chr>                <dttm>              <chr>          <date>  <date>      1 https://movilidad-o… 2024-07-30 10:54:08 gz             NA      2022-10-23  2 https://movilidad-o… 2024-07-30 10:51:07 gz             NA      2022-10-22  3 https://movilidad-o… 2024-07-30 10:47:52 gz             NA      2022-10-20  4 https://movilidad-o… 2024-07-30 10:14:55 gz             NA      2022-10-18  5 https://movilidad-o… 2024-07-30 10:11:58 gz             NA      2022-10-17  6 https://movilidad-o… 2024-07-30 10:09:03 gz             NA      2022-10-12  7 https://movilidad-o… 2024-07-30 10:05:57 gz             NA      2022-10-07  8 https://movilidad-o… 2024-07-30 10:02:12 gz             NA      2022-08-07  9 https://movilidad-o… 2024-07-30 09:58:34 gz             NA      2022-08-06 10 https://movilidad-o… 2024-07-30 09:54:30 gz             NA      2022-08-05 # ℹ 9,432 more rows # ℹ 1 more variable: local_path <chr>"},{"path":"/index.html","id":"zones","dir":"","previous_headings":"","what":"Zones","title":"Get Spanish Origin-Destination Data","text":"Zones can downloaded follows:","code":"distritos = spod_get_zones(type = \"distritos\") distritos_wgs84 = sf::st_transform(distritos, 4326) plot(distritos_wgs84)"},{"path":"/index.html","id":"estudios-basicos","dir":"","previous_headings":"","what":"Estudios basicos","title":"Get Spanish Origin-Destination Data","text":"day ficheros-diarios folder contains file following columns: can get result, multiple files, follows: result list duckdb tables load almost instantly, can used dplyr functions. Let’s aggregation find total number trips per hour 7 days:  figure summarises 925,874,012 trips 7 days associated 135,866,524 records.","code":"# set timeout for downloads options(timeout = 600) # 10 minutes u1 = \"https://movilidad-opendata.mitma.es/estudios_basicos/por-distritos/viajes/ficheros-diarios/2024-03/20240301_Viajes_distritos.csv.gz\" f1 = basename(u1) if (!file.exists(f1)) {   download.file(u1, f1) } drv = duckdb::duckdb(\"daily.duckdb\") con = DBI::dbConnect(drv) od1 = duckdb::tbl_file(con, f1) # colnames(od1) #  [1] \"fecha\"                   \"periodo\"                 #  [3] \"origen\"                  \"destino\"                 #  [5] \"distancia\"               \"actividad_origen\"        #  [7] \"actividad_destino\"       \"estudio_origen_posible\"  #  [9] \"estudio_destino_posible\" \"residencia\"              # [11] \"renta\"                   \"edad\"                    # [13] \"sexo\"                    \"viajes\"                  # [15] \"viajes_km\" od1_head = od1 |>   head() |>   collect() od1_head |>   knitr::kable() DBI::dbDisconnect(con) od_multi_list = spod_get(   subdir = \"estudios_basicos/por-distritos/viajes/ficheros-diarios\",   date_regex = \"2024030[1-7]\" ) od_multi_list[[1]] # Source:   SQL [?? x 15] # Database: DuckDB v1.0.0 [robin@Linux 6.5.0-45-generic:R 4.4.1/:memory:]       fecha periodo origen  destino distancia actividad_origen actividad_destino       <dbl> <chr>   <chr>   <chr>   <chr>     <chr>            <chr>              1 20240307 00      01009_… 01001   0.5-2     frecuente        casa               2 20240307 09      01009_… 01001   0.5-2     frecuente        casa               3 20240307 18      01009_… 01001   0.5-2     frecuente        casa               4 20240307 19      01009_… 01001   0.5-2     frecuente        casa               5 20240307 20      01009_… 01001   0.5-2     frecuente        casa               6 20240307 14      01002   01001   10-50     frecuente        casa               7 20240307 22      01002   01001   10-50     frecuente        casa               8 20240307 06      01009_… 01001   10-50     frecuente        casa               9 20240307 09      01009_… 01001   10-50     frecuente        casa              10 20240307 11      01009_… 01001   10-50     frecuente        casa              # ℹ more rows # ℹ 8 more variables: estudio_origen_posible <chr>, #   estudio_destino_posible <chr>, residencia <chr>, renta <chr>, edad <chr>, #   sexo <chr>, viajes <dbl>, viajes_km <dbl> class(od_multi_list[[1]]) [1] \"tbl_duckdb_connection\" \"tbl_dbi\"               \"tbl_sql\"               [4] \"tbl_lazy\"              \"tbl\" n_per_hour = od_multi_list |>   map(~ .x |>         group_by(periodo, fecha) |>         summarise(n = n(), Trips = sum(viajes)) |>         collect()   ) |>   list_rbind() |>   mutate(Time = lubridate::ymd_h(paste0(fecha, periodo))) |>   mutate(Day = lubridate::wday(Time, label = TRUE))  n_per_hour |>   ggplot(aes(x = Time, y = Trips)) +   geom_line(aes(colour = Day)) +   labs(title = \"Number of trips per hour over 7 days\")"},{"path":"/index.html","id":"desire-lines","dir":"","previous_headings":"","what":"Desire lines","title":"Get Spanish Origin-Destination Data","text":"’ll use input data pick-important flows Spain, focus longer trips visualisation: results show largest flows intra-zonal. Let’s keep inter-zonal flows: can convert geographic data {od} package:  Let’s focus trips around particular area (Salamanca):  use information subset rows, capture movement within study area: Let’s plot results:","code":"od_large = od_multi_list |>   map(~ .x |>         group_by(origen, destino) |>         summarise(Trips = sum(viajes), .groups = \"drop\") |>         filter(Trips > 500) |>         collect()   ) |>   list_rbind() |>   group_by(origen, destino) |>   summarise(Trips = sum(Trips)) |>   arrange(desc(Trips)) od_large # A tibble: 37,023 × 3 # Groups:   origen [3,723]    origen  destino    Trips    <chr>   <chr>      <dbl>  1 2807908 2807908 2441404.  2 0801910 0801910 2112188.  3 0801902 0801902 2013618.  4 2807916 2807916 1821504.  5 2807911 2807911 1785981.  6 04902   04902   1690606.  7 2807913 2807913 1504484.  8 2807910 2807910 1299586.  9 0704004 0704004 1287122. 10 28106   28106   1286058. # ℹ 37,013 more rows od_large_interzonal = od_large |>   filter(origen != destino) od_large_interzonal_sf = od::od_to_sf(   od_large_interzonal,   z = distritos_wgs84 ) od_large_interzonal_sf |>   ggplot() +   geom_sf(aes(size = Trips), colour = \"red\") +   theme_void() salamanca_zones = zonebuilder::zb_zone(\"Salamanca\") distritos_salamanca = distritos_wgs84[salamanca_zones, ] plot(distritos_salamanca) ids_salamanca = distritos_salamanca$ID od_salamanca = od_multi_list |>   map(~ .x |>         filter(origen %in% ids_salamanca) |>         filter(destino %in% ids_salamanca) |>         collect()   ) |>   list_rbind() |>   group_by(origen, destino) |>   summarise(Trips = sum(viajes)) |>   arrange(Trips) od_salamanca_sf = od::od_to_sf(   od_salamanca,   z = distritos_salamanca ) od_salamanca_sf |>   filter(origen != destino) |>   ggplot() +   geom_sf(aes(colour = Trips), size = 1) +   scale_colour_viridis_c() +   theme_void()"},{"path":"/index.html","id":"disaggregating-desire-lines","dir":"","previous_headings":"","what":"Disaggregating desire lines","title":"Get Spanish Origin-Destination Data","text":"’ll need additional dependencies: ’ll get road network OSM:  can use road network disaggregate desire lines: Let’s plot disaggregated desire lines:","code":"library(sf) library(tmap) salamanca_boundary = sf::st_union(distritos_salamanca) osm_full = osmactive::get_travel_network(salamanca_boundary) osm = osm_full[salamanca_boundary, ] drive_net = osmactive::get_driving_network(osm) drive_net_major = osmactive::get_driving_network_major(osm) cycle_net = osmactive::get_cycling_network(osm) cycle_net = osmactive::distance_to_road(cycle_net, drive_net_major) cycle_net = osmactive::classify_cycle_infrastructure(cycle_net) map_net = osmactive::plot_osm_tmap(cycle_net) map_net od_jittered = odjitter::jitter(   od_salamanca_sf,   zones = distritos_salamanca,   subpoints = drive_net,   disaggregation_threshold = 1000,   disaggregation_key = \"Trips\" ) od_jittered |>   arrange(Trips) |>   ggplot() +   geom_sf(aes(colour = Trips), size = 1) +   scale_colour_viridis_c() +   geom_sf(data = drive_net_major, colour = \"black\") +   theme_void()"},{"path":"/reference/spod_available_data_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the available v1 data list — spod_available_data_v1","title":"Get the available v1 data list — spod_available_data_v1","text":"function provides table available data list MITMA v1 (2020-2021), remote local.","code":""},{"path":"/reference/spod_available_data_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the available v1 data list — spod_available_data_v1","text":"","code":"spod_available_data_v1(   data_dir = spod_get_data_dir(),   check_local_files = FALSE,   quiet = FALSE )"},{"path":"/reference/spod_available_data_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the available v1 data list — spod_available_data_v1","text":"data_dir directory data stored. Defaults value returned spod_get_data_dir(). check_local_files Whether check local files exist. Defaults FALSE. quiet Whether suppress messages. Defaults FALSE.","code":""},{"path":"/reference/spod_available_data_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the available v1 data list — spod_available_data_v1","text":"tibble links, release dates files data, dates data coverage, local paths files, download status. target_url character. URL link data file. pub_ts POSIXct. timestamp file published. file_extension character. file extension data file (e.g., 'tar', 'gz'). data_ym Date. year month data coverage, available. data_ymd Date. specific date data coverage, available. local_path character. local file path data stored. downloaded logical. Indicator whether data file downloaded locally.","code":""},{"path":"/reference/spod_available_data_v1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the available v1 data list — spod_available_data_v1","text":"","code":"# Get the available v1 data list for the default data directory if (FALSE) {   metadata <- spod_available_data_v1()   names(metadata)   head(metadata) }"},{"path":"/reference/spod_clean_zones_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixes common issues in the zones data and cleans up variable names — spod_clean_zones_v1","title":"Fixes common issues in the zones data and cleans up variable names — spod_clean_zones_v1","text":"function fixes invalid geometries zones data renames \"ID\" column \"id\".","code":""},{"path":"/reference/spod_clean_zones_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixes common issues in the zones data and cleans up variable names — spod_clean_zones_v1","text":"","code":"spod_clean_zones_v1(zones_path)"},{"path":"/reference/spod_clean_zones_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixes common issues in the zones data and cleans up variable names — spod_clean_zones_v1","text":"zones_path path zones spatial data file.","code":""},{"path":"/reference/spod_clean_zones_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixes common issues in the zones data and cleans up variable names — spod_clean_zones_v1","text":"spatial object class sf.","code":""},{"path":"/reference/spod_convert_od_v1_to_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert all downloaded v1 origin-destination data to duckdb — spod_convert_od_v1_to_duckdb","title":"Convert all downloaded v1 origin-destination data to duckdb — spod_convert_od_v1_to_duckdb","text":"Convert downloaded v1 origin-destination data duckdb","code":""},{"path":"/reference/spod_convert_od_v1_to_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert all downloaded v1 origin-destination data to duckdb — spod_convert_od_v1_to_duckdb","text":"","code":"spod_convert_od_v1_to_duckdb(   zones = c(\"districts\", \"dist\", \"distr\", \"distritos\", \"municipalities\", \"muni\",     \"municip\", \"municipios\"),   data_dir = spod_get_data_dir(),   save_dir = NULL,   quiet = FALSE,   duck_max_mem = 3,   duck_max_threads = parallelly::availableCores(),   overwrite = FALSE )"},{"path":"/reference/spod_convert_od_v1_to_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert all downloaded v1 origin-destination data to duckdb — spod_convert_od_v1_to_duckdb","text":"zones zones download data. Can \"districts\" (\"dist\", \"distr\", original Spanish \"distritos\") \"municipalities\" (\"muni\", \"municip\", original Spanish \"municipios\"). data_dir directory data stored. save_dir path directory duckdb files saved. NULL, uses default location data_dir (set SPANISH_OD_DATA_DIR environment variable). Therefore, default relative path <data_dir>/clean_data/v1/tabular/duckdb/od_<zones>.duckdb. quiet Whether suppress messages. Defaults FALSE. duck_max_mem maximum memory use GB. conservative default 3 GB, enough resaving data DuckDB form folder CSV.gz files small enough fit memory even old computers. data analysis using already converted data (DuckDB Parquet format) raw CSV.gz data, recommended increase according available resources. duck_max_threads maximum number threads use. Defaults number available cores minus 1. overwrite Logical. TRUE, overwrites existing duckdb files. Defaults FALSE.","code":""},{"path":"/reference/spod_convert_od_v1_to_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert all downloaded v1 origin-destination data to duckdb — spod_convert_od_v1_to_duckdb","text":"Path saved DuckDB file.","code":""},{"path":"/reference/spod_dates_argument_to_dates_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert multiple formates of date arguments to a sequence of dates — spod_dates_argument_to_dates_seq","title":"Convert multiple formates of date arguments to a sequence of dates — spod_dates_argument_to_dates_seq","text":"function processes date arguments provided various functions package. can handle single dates arbitratry sequences (vectors) dates ISO (YYYY-MM-DD) YYYYMMDD format. can also handle date ranges format 'YYYY-MM-DD_YYYY-MM-DD' ('YYYYMMDD_YYYYMMDD'), date ranges named vec regular expressions match dates format YYYYMMDD.","code":""},{"path":"/reference/spod_dates_argument_to_dates_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert multiple formates of date arguments to a sequence of dates — spod_dates_argument_to_dates_seq","text":"","code":"spod_dates_argument_to_dates_seq(dates)"},{"path":"/reference/spod_dates_argument_to_dates_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert multiple formates of date arguments to a sequence of dates — spod_dates_argument_to_dates_seq","text":"dates character Date vector dates process. Kindly keep mind v1 v2 data follow different data collection methodologies may directly comparable. Therefore, try request data versions date range. need compare data versions, please refer respective codebooks methodology documents. v1 data covers period 2020-02-14 2021-05-09, v2 data covers period 2022-01-01 present notice. true dates range checked available data version every function run. possible values can following: single date ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. vector dates ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. Can non-consecutive sequence dates. date range eigher character Date object length 2 clearly named elements start end ISO (YYYY-MM-DD) YYYYMMDD format. E.g. c(start = \"2020-02-15\", end = \"2020-02-17\"); character object form YYYY-MM-DD_YYYY-MM-DD YYYYMMDD_YYYYMMDD. example, 2020-02-15_2020-02-17 20200215_20200217. regular expression match dates format YYYYMMDD. character object. example, ^202002 match dates February 2020.","code":""},{"path":"/reference/spod_dates_argument_to_dates_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert multiple formates of date arguments to a sequence of dates — spod_dates_argument_to_dates_seq","text":"character vector dates ISO format (YYYY-MM-DD).","code":""},{"path":"/reference/spod_download_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the data files of specified type, zones, and dates — spod_download_data","title":"Download the data files of specified type, zones, and dates — spod_download_data","text":"function downloads data files specified type, zones, dates data version.","code":""},{"path":"/reference/spod_download_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the data files of specified type, zones, and dates — spod_download_data","text":"","code":"spod_download_data(   type = c(\"od\", \"origin-destination\", \"os\", \"overnight_stays\", \"tpp\",     \"trips_per_person\"),   zones = c(\"districts\", \"dist\", \"distr\", \"distritos\", \"municipalities\", \"muni\",     \"municip\", \"municipios\", \"lau\", \"large_urban_areas\", \"gau\", \"grandes_areas_urbanas\"),   dates = NULL,   data_dir = spod_get_data_dir(),   quiet = FALSE,   return_output = TRUE )"},{"path":"/reference/spod_download_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the data files of specified type, zones, and dates — spod_download_data","text":"type type data download. Can \"origin-destination\" (ust \"od\"), \"trips_per_person\" (just \"tpp\") v1 data. v2 data \"overnight_stays\" (just \"os\") also available. data types supported future. See respective codebooks information. ADD CODEBOOKS! package zones zones download data. Can \"districts\" (\"dist\", \"distr\", original Spanish \"distritos\") \"municipalities\" (\"muni\", \"municip\", original Spanish \"municipios\"). Additionaly, can \"large_urban_areas\" (\"lau\", original Spanish \"grandes_areas_urbanas\", \"gau\") v2 data. dates character Date vector dates process. Kindly keep mind v1 v2 data follow different data collection methodologies may directly comparable. Therefore, try request data versions date range. need compare data versions, please refer respective codebooks methodology documents. v1 data covers period 2020-02-14 2021-05-09, v2 data covers period 2022-01-01 present notice. true dates range checked available data version every function run. possible values can following: single date ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. vector dates ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. Can non-consecutive sequence dates. date range eigher character Date object length 2 clearly named elements start end ISO (YYYY-MM-DD) YYYYMMDD format. E.g. c(start = \"2020-02-15\", end = \"2020-02-17\"); character object form YYYY-MM-DD_YYYY-MM-DD YYYYMMDD_YYYYMMDD. example, 2020-02-15_2020-02-17 20200215_20200217. regular expression match dates format YYYYMMDD. character object. example, ^202002 match dates February 2020. data_dir directory data stored. Defaults value returned spod_get_data_dir() returns value environment variable SPANISH_OD_DATA_DIR temporary directory variable set. quiet Logical. TRUE, function print messages console. Defaults FALSE. return_output Logical. TRUE, function returns character vector paths downloaded files. FALSE, function returns NULL.","code":""},{"path":"/reference/spod_download_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the data files of specified type, zones, and dates — spod_download_data","text":"character vector paths downloaded files. Unless return_output = FALSE, case function returns NULL.","code":""},{"path":"/reference/spod_download_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the data files of specified type, zones, and dates — spod_download_data","text":"","code":"if (FALSE) { # \\dontrun{ # Download the origin-destination on district level for the a date range in March 2020 spod_download_data(   type = \"od\", zones = \"districts\",   date_range = c(\"2020-03-20\", \"2020-03-24\") )  # Download the origin-destination on district level for select dates in 2020 and 2021 spod_download_data(   type = \"od\", zones = \"dist\",   dates_list = c(\"2020-03-20\", \"2020-03-24\", \"2021-03-20\", \"2021-03-24\") )  # Download the origin-destination on municipality level using regex for a date range in March 2020 # (the regex will capture the dates 2020-03-20 to 2020-03-24) spod_download_data(   type = \"od\", zones = \"municip\",   date_regex = \"2020032[0-4]\" ) } # }"},{"path":"/reference/spod_duckdb_filter_by_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a duckdb conenction by dates — spod_duckdb_filter_by_dates","title":"Filter a duckdb conenction by dates — spod_duckdb_filter_by_dates","text":"Filter duckdb conenction dates","code":""},{"path":"/reference/spod_duckdb_filter_by_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a duckdb conenction by dates — spod_duckdb_filter_by_dates","text":"","code":"spod_duckdb_filter_by_dates(con, source_view_name, new_view_name, dates)"},{"path":"/reference/spod_duckdb_filter_by_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a duckdb conenction by dates — spod_duckdb_filter_by_dates","text":"con duckdb connection source_view_name name source duckdb \"view\" (virtual table, context current package likely connected folder CSV files) new_view_name name new duckdb \"view\" (virtual table, context current package likely connected folder CSV files). dates character Date vector dates process. Kindly keep mind v1 v2 data follow different data collection methodologies may directly comparable. Therefore, try request data versions date range. need compare data versions, please refer respective codebooks methodology documents. v1 data covers period 2020-02-14 2021-05-09, v2 data covers period 2022-01-01 present notice. true dates range checked available data version every function run. possible values can following: single date ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. vector dates ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. Can non-consecutive sequence dates. date range eigher character Date object length 2 clearly named elements start end ISO (YYYY-MM-DD) YYYYMMDD format. E.g. c(start = \"2020-02-15\", end = \"2020-02-17\"); character object form YYYY-MM-DD_YYYY-MM-DD YYYYMMDD_YYYYMMDD. example, 2020-02-15_2020-02-17 20200215_20200217. regular expression match dates format YYYYMMDD. character object. example, ^202002 match dates February 2020.","code":""},{"path":"/reference/spod_duckdb_limit_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Set maximum memory and number of threads for a DuckDB connection — spod_duckdb_limit_resources","title":"Set maximum memory and number of threads for a DuckDB connection — spod_duckdb_limit_resources","text":"Set maximum memory number threads DuckDB connection","code":""},{"path":"/reference/spod_duckdb_limit_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set maximum memory and number of threads for a DuckDB connection — spod_duckdb_limit_resources","text":"","code":"spod_duckdb_limit_resources(   con,   duck_max_mem = 3,   duck_max_threads = parallelly::availableCores() - 1 )"},{"path":"/reference/spod_duckdb_limit_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set maximum memory and number of threads for a DuckDB connection — spod_duckdb_limit_resources","text":"con duckdb connection duck_max_mem maximum memory use GB. conservative default 3 GB, enough resaving data DuckDB form folder CSV.gz files small enough fit memory even old computers. data analysis using already converted data (DuckDB Parquet format) raw CSV.gz data, recommended increase according available resources. duck_max_threads maximum number threads use. Defaults number available cores minus 1.","code":""},{"path":"/reference/spod_duckdb_od_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a duckdb connection to v1 OD data — spod_duckdb_od_v1","title":"Creates a duckdb connection to v1 OD data — spod_duckdb_od_v1","text":"function creates duckdb connection v1 OD data.","code":""},{"path":"/reference/spod_duckdb_od_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a duckdb connection to v1 OD data — spod_duckdb_od_v1","text":"","code":"spod_duckdb_od_v1(   con = DBI::dbConnect(duckdb::duckdb(), dbdir = \":memory:\", read_only = FALSE),   zones = c(\"districts\", \"dist\", \"distr\", \"distritos\", \"municipalities\", \"muni\",     \"municip\", \"municipios\", \"lau\", \"large_urban_areas\", \"gau\", \"grandes_areas_urbanas\"),   data_dir = spod_get_data_dir() )"},{"path":"/reference/spod_duckdb_od_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a duckdb connection to v1 OD data — spod_duckdb_od_v1","text":"con duckdb connection object. specified, new -memory connection created. zones zones download data. Can \"districts\" (\"dist\", \"distr\", original Spanish \"distritos\") \"municipalities\" (\"muni\", \"municip\", original Spanish \"municipios\"). Additionaly, can \"large_urban_areas\" (\"lau\", original Spanish \"grandes_areas_urbanas\", \"gau\") v2 data. data_dir directory data stored. Defaults value returned spod_get_data_dir() returns value environment variable SPANISH_OD_DATA_DIR temporary directory variable set.","code":""},{"path":"/reference/spod_duckdb_od_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a duckdb connection to v1 OD data — spod_duckdb_od_v1","text":"duckdb connection object 2 views: od_csv_raw - raw table view cached CSV files origin-destination data previously cached $SPANISH_OD_DATA_DIR od_csv_clean - cleaned-table view od_csv_raw column names values translated mapped English. still includes cached data. structure cleaned-views od_csv_clean follows: full_date Date. full date trip, including year, month, day. id_origin factor. identifier origin location trip, formatted code (e.g., '01001_AM'). id_destination factor. identifier destination location trip, formatted code (e.g., '01001_AM'). activity_origin factor. type activity origin location (e.g., 'home', 'work'). Note: available district level data. activity_destination factor. type activity destination location (e.g., 'home', ''). Note: available district level data. residence_province_ine_code factor. province residence group individual making trip, encoded according INE classification. Note: available district level data. residence_province_name factor. province residence group individuals making trip (e.g., 'Cuenca', 'Girona'). Note: available district level data. time_slot integer. time slot (hour day) trip started, represented integer (e.g., 0, 1, 2). distance factor. distance category trip, represented code (e.g., '002-005' 2-5 km). n_trips double. number trips taken within specified time slot distance. trips_total_length_km double. total length trips kilometers specified time slot distance. year double. year trip. month double. month trip. day double. day trip. structure original data od_csv_raw follows: fecha Date. date trip, including year, month, day. origen character. identifier origin location trip, formatted character string (e.g., '01001_AM'). destino character. identifier destination location trip, formatted character string (e.g., '01001_AM'). actividad_origen character. type activity origin location (e.g., 'casa', 'trabajo'). actividad_destino character. type activity destination location (e.g., 'otros', 'trabajo'). residencia character. code representing residence individual making trip (e.g., '01') according official INE classification. edad character. age individual making trip. data actaully filled 'NA' values, column removed cleaned-translated view described . periodo integer. time period trip started, represented integer (e.g., 0, 1, 2). distancia character. distance category trip, represented character string (e.g., '002-005' 2-5 km). viajes double. number trips taken within specified time period distance. viajes_km double. total length trips kilometers specified time period distance. day double. day trip. month double. month trip. year double. year trip.","code":""},{"path":"/reference/spod_expand_dates_from_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to expand dates from a regex — spod_expand_dates_from_regex","title":"Function to expand dates from a regex — spod_expand_dates_from_regex","text":"function generates sequence dates regular expression pattern. based provided regular expression.","code":""},{"path":"/reference/spod_expand_dates_from_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to expand dates from a regex — spod_expand_dates_from_regex","text":"","code":"spod_expand_dates_from_regex(date_regex)"},{"path":"/reference/spod_expand_dates_from_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to expand dates from a regex — spod_expand_dates_from_regex","text":"date_regex regular expression match dates format yyyymmdd.","code":""},{"path":"/reference/spod_expand_dates_from_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to expand dates from a regex — spod_expand_dates_from_regex","text":"character vector dates matching regex.","code":""},{"path":"/reference/spod_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the origin-destination data — spod_get","title":"Retrieves the origin-destination data — spod_get","text":"function downloads data URLs https://movilidad-opendata.mitma.es/estudios_basicos/por-distritos/viajes/ficheros-diarios/2024-03/20240301_Viajes_distritos.csv.gz file exist data directory.","code":""},{"path":"/reference/spod_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the origin-destination data — spod_get","text":"","code":"spod_get(   data_dir = spod_get_data_dir(),   subdir = \"estudios_basicos/por-distritos/viajes/ficheros-diarios\",   date_regex = \"2024030[1-2]\",   read_fun = duckdb::tbl_file )"},{"path":"/reference/spod_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the origin-destination data — spod_get","text":"data_dir directory data stored. subdir subdirectory data stored. date_regex regular expression match date data download. read_fun function read data. Defaults duckdb::tbl_file.","code":""},{"path":"/reference/spod_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the origin-destination data — spod_get","text":"local path downloaded file (download_od), data frame origin-destination data (spod_get).","code":""},{"path":"/reference/spod_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the origin-destination data — spod_get","text":"","code":"# Download the origin-destination data for the first two days of March 2024 if (FALSE) {   od_20240301_20240302 <- spod_get(date_regex = \"2024-03-0[1-2]\") }"},{"path":"/reference/spod_get_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the data directory — spod_get_data_dir","title":"Get the data directory — spod_get_data_dir","text":"function retrieves data directory environment variable SPANISH_OD_DATA_DIR. environment variable set, returns temporary directory.","code":""},{"path":"/reference/spod_get_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the data directory — spod_get_data_dir","text":"","code":"spod_get_data_dir(quiet = FALSE)"},{"path":"/reference/spod_get_data_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the data directory — spod_get_data_dir","text":"quiet Logical. TRUE, function print messages console. Defaults FALSE.","code":""},{"path":"/reference/spod_get_data_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the data directory — spod_get_data_dir","text":"data directory.","code":""},{"path":"/reference/spod_get_latest_v1_file_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get latest file list from the XML for MITMA open mobiltiy data v1 (2020-2021) — spod_get_latest_v1_file_list","title":"Get latest file list from the XML for MITMA open mobiltiy data v1 (2020-2021) — spod_get_latest_v1_file_list","text":"Get latest file list XML MITMA open mobiltiy data v1 (2020-2021)","code":""},{"path":"/reference/spod_get_latest_v1_file_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get latest file list from the XML for MITMA open mobiltiy data v1 (2020-2021) — spod_get_latest_v1_file_list","text":"","code":"spod_get_latest_v1_file_list(   data_dir = spod_get_data_dir(),   xml_url = \"https://opendata-movilidad.mitma.es/RSS.xml\" )"},{"path":"/reference/spod_get_latest_v1_file_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get latest file list from the XML for MITMA open mobiltiy data v1 (2020-2021) — spod_get_latest_v1_file_list","text":"data_dir directory data stored. Defaults value returned spod_get_data_dir(). xml_url URL XML file download. Defaults \"https://opendata-movilidad.mitma.es/RSS.xml\".","code":""},{"path":"/reference/spod_get_latest_v1_file_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get latest file list from the XML for MITMA open mobiltiy data v1 (2020-2021) — spod_get_latest_v1_file_list","text":"path downloaded XML file.","code":""},{"path":"/reference/spod_get_latest_v1_file_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get latest file list from the XML for MITMA open mobiltiy data v1 (2020-2021) — spod_get_latest_v1_file_list","text":"","code":"if (FALSE) {   spod_get_latest_v1_file_list() }"},{"path":"/reference/spod_get_latest_v2_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Get latest file list from the XML for MITMA open mobiltiy data v2 (2022 onwards) — spod_get_latest_v2_xml","title":"Get latest file list from the XML for MITMA open mobiltiy data v2 (2022 onwards) — spod_get_latest_v2_xml","text":"Get latest file list XML MITMA open mobiltiy data v2 (2022 onwards)","code":""},{"path":"/reference/spod_get_latest_v2_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get latest file list from the XML for MITMA open mobiltiy data v2 (2022 onwards) — spod_get_latest_v2_xml","text":"","code":"spod_get_latest_v2_xml(   data_dir = spod_get_data_dir(),   xml_url = \"https://movilidad-opendata.mitma.es/RSS.xml\" )"},{"path":"/reference/spod_get_latest_v2_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get latest file list from the XML for MITMA open mobiltiy data v2 (2022 onwards) — spod_get_latest_v2_xml","text":"data_dir directory data stored. Defaults value returned spod_get_data_dir(). xml_url URL XML file download. Defaults \"https://movilidad-opendata.mitma.es/RSS.xml\".","code":""},{"path":"/reference/spod_get_latest_v2_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get latest file list from the XML for MITMA open mobiltiy data v2 (2022 onwards) — spod_get_latest_v2_xml","text":"path downloaded XML file.","code":""},{"path":"/reference/spod_get_latest_v2_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get latest file list from the XML for MITMA open mobiltiy data v2 (2022 onwards) — spod_get_latest_v2_xml","text":"","code":"if (FALSE) {   spod_get_latest_v2_xml() }"},{"path":"/reference/spod_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the data dictionary — spod_get_metadata","title":"Get the data dictionary — spod_get_metadata","text":"function retrieves data dictionary specified data directory.","code":""},{"path":"/reference/spod_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the data dictionary — spod_get_metadata","text":"","code":"spod_get_metadata(data_dir = spod_get_data_dir(), quiet = FALSE)"},{"path":"/reference/spod_get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the data dictionary — spod_get_metadata","text":"data_dir directory data stored. Defaults value returned spod_get_data_dir(). quiet Whether suppress messages. Defaults FALSE.","code":""},{"path":"/reference/spod_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the data dictionary — spod_get_metadata","text":"data dictionary.","code":""},{"path":"/reference/spod_get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the data dictionary — spod_get_metadata","text":"","code":"# Get the data dictionary for the default data directory if (FALSE) {   metadata <- spod_get_metadata()   names(metadata)   head(metadata) }"},{"path":"/reference/spod_get_od_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the origin-destination v1 data (2020-2021) for specified dates — spod_get_od_v1","title":"Load the origin-destination v1 data (2020-2021) for specified dates — spod_get_od_v1","text":"function retrieves v1 (2020-2021) origin_destination_data specified dates. checks requested data already cached locally downloads . requested data cached, creates DuckDB connection cache data folder provides table","code":""},{"path":"/reference/spod_get_od_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the origin-destination v1 data (2020-2021) for specified dates — spod_get_od_v1","text":"","code":"spod_get_od_v1(   zones = c(\"districts\", \"dist\", \"distr\", \"distritos\", \"municipalities\", \"muni\",     \"municip\", \"municipios\"),   dates = NULL,   data_dir = spod_get_data_dir(),   quiet = FALSE,   duck_max_mem = 2,   duck_max_threads = parallelly::availableCores() )"},{"path":"/reference/spod_get_od_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the origin-destination v1 data (2020-2021) for specified dates — spod_get_od_v1","text":"zones zones download data. Can \"districts\" (\"dist\", \"distr\", original Spanish \"distritos\") \"municipalities\" (\"muni\", \"municip\", original Spanish \"municipios\"). Additionaly, can \"large_urban_areas\" (\"lau\", original Spanish \"grandes_areas_urbanas\", \"gau\") v2 data. dates character Date vector dates process. Kindly keep mind v1 v2 data follow different data collection methodologies may directly comparable. Therefore, try request data versions date range. need compare data versions, please refer respective codebooks methodology documents. v1 data covers period 2020-02-14 2021-05-09, v2 data covers period 2022-01-01 present notice. true dates range checked available data version every function run. possible values can following: single date ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. vector dates ISO (YYYY-MM-DD) YYYYMMDD format. character Date object. Can non-consecutive sequence dates. date range eigher character Date object length 2 clearly named elements start end ISO (YYYY-MM-DD) YYYYMMDD format. E.g. c(start = \"2020-02-15\", end = \"2020-02-17\"); character object form YYYY-MM-DD_YYYY-MM-DD YYYYMMDD_YYYYMMDD. example, 2020-02-15_2020-02-17 20200215_20200217. regular expression match dates format YYYYMMDD. character object. example, ^202002 match dates February 2020. data_dir directory data stored. Defaults value returned spod_get_data_dir() returns value environment variable SPANISH_OD_DATA_DIR temporary directory variable set. quiet Logical. TRUE, function print messages console. Defaults FALSE. duck_max_mem maximum memory use GB. conservative default 3 GB, enough resaving data DuckDB form folder CSV.gz files small enough fit memory even old computers. data analysis using already converted data (DuckDB Parquet format) raw CSV.gz data, recommended increase according available resources. duck_max_threads maximum number threads use. Defaults number available cores minus 1.","code":""},{"path":"/reference/spod_get_od_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the origin-destination v1 data (2020-2021) for specified dates — spod_get_od_v1","text":"DuckDB table connection object. can manupulated using dplyr verbs, can loaded memory using dplyr::collect(). structure object follows: full_date Date. full date trip, including year, month, day. id_origin factor. identifier origin location trip, formatted code (e.g., '01001_AM'). id_destination factor. identifier destination location trip, formatted code (e.g., '01001_AM'). activity_origin factor. type activity origin location (e.g., 'home', 'work'). activity_destination factor. type activity destination location (e.g., 'home', ''). residence_province factor. province residence individual making trip (e.g. 'Cuenca', 'Girona'). time_slot integer. time slot trip started, represented integer (e.g., 0, 1, 2). distance factor. distance category trip, represented code (e.g., '002-005' 2-5 km). n_trips double. number trips taken within specified time slot distance. trips_total_length_km double. total length trips kilometers specified time slot distance. year double. year trip. month double. month trip. day double. day trip. object also contains reference source DuckDB conneciton full view cached data. can accessed using od_table$src$con. See examples . connection includes two views: od_csv_raw - raw table view cached CSV files origin-destination data previously cached $SPANISH_OD_DATA_DIR od_csv_clean - cleaned-table view od_csv_raw column names values translated mapped English. still includes cached data. View od_csv_clean structure filtered view 'od_filtered', returned spod_get_od_v1() DuckDB table connection object. view od_csv_raw original Spanish column names values following structure: fecha Date. date trip, including year, month, day. origen character. identifier origin location trip, formatted character string (e.g., '01001_AM'). destino character. identifier destination location trip, formatted character string (e.g., '01001_AM'). actividad_origen character. type activity origin location (e.g., 'casa', 'trabajo'). actividad_destino character. type activity destination location (e.g., 'otros', 'trabajo'). residencia character. code representing residence individual making trip (e.g., '01') according official INE classification. edad character. age individual making trip. data actaully filled 'NA' values, column removed cleaned-translated view described . periodo integer. time period trip started, represented integer (e.g., 0, 1, 2). distancia character. distance category trip, represented character string (e.g., '002-005' 2-5 km). viajes double. number trips taken within specified time period distance. viajes_km double. total length trips kilometers specified time period distance. day double. day trip. month double. month trip. year double. year trip.","code":""},{"path":"/reference/spod_get_od_v1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the origin-destination v1 data (2020-2021) for specified dates — spod_get_od_v1","text":"","code":"if (FALSE) { # \\dontrun{  # create a connection to the v1 data Sys.setenv(SPANISH_OD_DATA_DIR = \"~/home/nosync/cache/mitma\") dates <- c(\"2020-02-14\", \"2020-03-14\", \"2021-02-14\", \"2021-02-14\", \"2021-02-15\") od_dist <- spod_get_od_v1(zones = \"distr\", dates = dates)  # od dist is a table view filtered to the specified dates  # access the source connection with all dates # list tables DBI::dbListTables(od_dist$src$con) } # }"},{"path":"/reference/spod_get_valid_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get valid dates for the specified data version — spod_get_valid_dates","title":"Get valid dates for the specified data version — spod_get_valid_dates","text":"Get valid dates specified data version","code":""},{"path":"/reference/spod_get_valid_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get valid dates for the specified data version — spod_get_valid_dates","text":"","code":"spod_get_valid_dates(ver = 1)"},{"path":"/reference/spod_get_valid_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get valid dates for the specified data version — spod_get_valid_dates","text":"ver version data use. Defaults 1. Can 1 2.","code":""},{"path":"/reference/spod_get_valid_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get valid dates for the specified data version — spod_get_valid_dates","text":"Dates vector valid dates specified data version.","code":""},{"path":"/reference/spod_get_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the zones data — spod_get_zones","title":"Retrieves the zones data — spod_get_zones","text":"function retrieves zones data specified data directory. can retrieve either \"distritos\" \"municipios\" zones data.","code":""},{"path":"/reference/spod_get_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the zones data — spod_get_zones","text":"","code":"spod_get_zones(data_dir = spod_get_data_dir(), type = \"distritos\")"},{"path":"/reference/spod_get_zones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the zones data — spod_get_zones","text":"data_dir directory data stored. type type zones data retrieve (\"distritos\" \"municipios\").","code":""},{"path":"/reference/spod_get_zones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the zones data — spod_get_zones","text":"spatial object containing zones data.","code":""},{"path":"/reference/spod_get_zones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the zones data — spod_get_zones","text":"","code":"if (FALSE) {   zones <- spod_get_zones() }"},{"path":"/reference/spod_get_zones_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the zones for v1 data — spod_get_zones_v1","title":"Retrieves the zones for v1 data — spod_get_zones_v1","text":"function retrieves zones data specified data directory. can retrieve either \"distritos\" \"municipios\" zones data.","code":""},{"path":"/reference/spod_get_zones_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the zones for v1 data — spod_get_zones_v1","text":"","code":"spod_get_zones_v1(   zones = c(\"districts\", \"dist\", \"distr\", \"distritos\", \"municipalities\", \"muni\",     \"municip\", \"municipios\"),   data_dir = spod_get_data_dir(),   quiet = FALSE )"},{"path":"/reference/spod_get_zones_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the zones for v1 data — spod_get_zones_v1","text":"zones zones download data. Can \"districts\" (\"dist\", \"distr\", original Spanish \"distritos\") \"municipalities\" (\"muni\", \"municip\", original Spanish \"municipios\"). data_dir directory data stored. quiet Whether suppress messages. Defaults FALSE.","code":""},{"path":"/reference/spod_get_zones_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the zones for v1 data — spod_get_zones_v1","text":"spatial object containing zones data.","code":""},{"path":"/reference/spod_get_zones_v1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the zones for v1 data — spod_get_zones_v1","text":"","code":"if (FALSE) {   zones <- spod_get_zones() }"},{"path":"/reference/spod_is_data_version_overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if specified dates span both data versions — spod_is_data_version_overlaps","title":"Check if specified dates span both data versions — spod_is_data_version_overlaps","text":"function checks specified dates date ranges span v1 v2 data versions.","code":""},{"path":"/reference/spod_is_data_version_overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if specified dates span both data versions — spod_is_data_version_overlaps","text":"","code":"spod_is_data_version_overlaps(dates)"},{"path":"/reference/spod_is_data_version_overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if specified dates span both data versions — spod_is_data_version_overlaps","text":"dates Dates vector dates check.","code":""},{"path":"/reference/spod_is_data_version_overlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if specified dates span both data versions — spod_is_data_version_overlaps","text":"TRUE dates span data versions, FALSE otherwise.","code":""},{"path":"/reference/spod_match_data_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Match data types to folders — spod_match_data_type","title":"Match data types to folders — spod_match_data_type","text":"Match data types folders","code":""},{"path":"/reference/spod_match_data_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match data types to folders — spod_match_data_type","text":"","code":"spod_match_data_type(   type = c(\"od\", \"origin-destination\", \"os\", \"overnight_stays\", \"tpp\",     \"trips_per_person\"),   ver = c(1, 2) )"},{"path":"/reference/spod_match_data_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match data types to folders — spod_match_data_type","text":"type type data match. Can \"od\", \"origin-destination\", \"os\", \"overnight_stays\", \"tpp\", \"trips_per_person\". ver version data use. Defaults 1. Can 1 2.","code":""},{"path":"/reference/spod_sql_where_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a WHERE part of an SQL query from a sequence of dates — spod_sql_where_dates","title":"Generate a WHERE part of an SQL query from a sequence of dates — spod_sql_where_dates","text":"Generate part SQL query sequence dates","code":""},{"path":"/reference/spod_sql_where_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a WHERE part of an SQL query from a sequence of dates — spod_sql_where_dates","text":"","code":"spod_sql_where_dates(dates)"},{"path":"/reference/spod_sql_where_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a WHERE part of an SQL query from a sequence of dates — spod_sql_where_dates","text":"dates Dates vector dates process.","code":""},{"path":"/reference/spod_sql_where_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a WHERE part of an SQL query from a sequence of dates — spod_sql_where_dates","text":"character vector SQL query.","code":""},{"path":"/reference/spod_subfolder_clean_data_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Get clean data subfolder name — spod_subfolder_clean_data_cache","title":"Get clean data subfolder name — spod_subfolder_clean_data_cache","text":"Change subfolder name code function clean data cache apply globally, functions package use function get clean data cache path.","code":""},{"path":"/reference/spod_subfolder_clean_data_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get clean data subfolder name — spod_subfolder_clean_data_cache","text":"","code":"spod_subfolder_clean_data_cache(ver = 1)"},{"path":"/reference/spod_subfolder_clean_data_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get clean data subfolder name — spod_subfolder_clean_data_cache","text":"ver Integer. version data. Must 1 2.","code":""},{"path":"/reference/spod_subfolder_clean_data_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get clean data subfolder name — spod_subfolder_clean_data_cache","text":"Character string subfolder name clean data cache.","code":""},{"path":"/reference/spod_subfolder_raw_data_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Get raw data cache subfolder name — spod_subfolder_raw_data_cache","title":"Get raw data cache subfolder name — spod_subfolder_raw_data_cache","text":"Change subfolder name code function raw data cache apply globally, functions package use function get raw data cache path.","code":""},{"path":"/reference/spod_subfolder_raw_data_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get raw data cache subfolder name — spod_subfolder_raw_data_cache","text":"","code":"spod_subfolder_raw_data_cache(ver = 1)"},{"path":"/reference/spod_subfolder_raw_data_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get raw data cache subfolder name — spod_subfolder_raw_data_cache","text":"ver Integer. version data. Must 1 2.","code":""},{"path":"/reference/spod_subfolder_raw_data_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get raw data cache subfolder name — spod_subfolder_raw_data_cache","text":"Character string subfolder name raw data cache.","code":""}]
