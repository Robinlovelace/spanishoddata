% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_v1_data.R
\name{spod_get_od}
\alias{spod_get_od}
\title{Load the origin-destination data for specified dates}
\usage{
spod_get_od(
  zones = c("districts", "dist", "distr", "distritos", "municipalities", "muni",
    "municip", "municipios"),
  dates = NULL,
  data_dir = spod_get_data_dir(),
  quiet = FALSE,
  duck_max_mem = 3,
  duck_max_threads = parallelly::availableCores() - 1
)
}
\arguments{
\item{zones}{The zones for which to download the data. Can be \code{"districts"} (or \code{"dist"}, \code{"distr"}, or the original Spanish \code{"distritos"}) or \code{"municipalities"} (or \code{"muni"}, \code{"municip"}, or the original Spanish \code{"municipios"}) for both data versions. Additionaly, these can be \code{"large_urban_areas"} (or \code{"lau"}, or the original Spanish \code{"grandes_areas_urbanas"}, or \code{"gau"}) for v2 data (2022 onwards).}

\item{dates}{A \code{character} or \code{Date} vector of dates to process. Kindly keep in mind that v1 and v2 data follow different data collection methodologies and may not be directly comparable. Therefore, do not try to request data from both versions for the same date range. If you need to compare data from both versions, please refer to the respective codebooks and methodology documents. The v1 data covers the period from 2020-02-14 to 2021-05-09, and the v2 data covers the period from 2022-01-01 to the present until further notice. The true dates range is checked against the available data for each version on every function run.

The possible values can be any of the following:
\itemize{
\item A single date in ISO (YYYY-MM-DD) or YYYYMMDD format. \code{character} or \code{Date} object.
\item A vector of dates in ISO (YYYY-MM-DD) or YYYYMMDD format. \code{character} or \code{Date} object. Can be any non-consecutive sequence of dates.
\item A date range
\itemize{
\item eigher a \code{character} or \code{Date} object of length 2 with clearly named elements \code{start} and \code{end} in ISO (YYYY-MM-DD) or YYYYMMDD format. E.g. \code{c(start = "2020-02-15", end = "2020-02-17")};
\item or a \code{character} object of the form \code{YYYY-MM-DD_YYYY-MM-DD} or \code{YYYYMMDD_YYYYMMDD}. For example, \verb{2020-02-15_2020-02-17} or \verb{20200215_20200217}.
}
\item A regular expression to match dates in the format \code{YYYYMMDD}. \code{character} object. For example, \verb{^202002} will match all dates in February 2020.
}}

\item{data_dir}{The directory where the data is stored. Defaults to the value returned by \code{spod_get_data_dir()} which returns the value of the environment variable \code{SPANISH_OD_DATA_DIR} or a temporary directory if the variable is not set.}

\item{quiet}{A logical value indicating whether to suppress messages. Default is \code{FALSE}.}

\item{duck_max_mem}{The maximum memory to use in GB. A conservative default is 3 GB, which should be enough for resaving the data to DuckDB form a folder of CSV.gz files while being small enough to fit in memory of most even old computers. For data analysis using the already converted data (in DuckDB or Parquet format) or with the raw CSV.gz data, it is recommended to increase it according to available resources.}

\item{duck_max_threads}{The maximum number of threads to use. Defaults to the number of available cores minus 1.}
}
\value{
A DuckDB table connection object. It can be manupulated using \code{dplyr} verbs, or can be loaded into memory using \code{dplyr::collect()}. The structure of the object is as follows:

\describe{
\item{full_date}{\code{Date}. The full date of the trip, including year, month, and day.}
\item{id_origin}{\code{factor}. The identifier for the origin location of the trip, formatted as a code (e.g., '01001_AM').}
\item{id_destination}{\code{factor}. The identifier for the destination location of the trip, formatted as a code (e.g., '01001_AM').}
\item{activity_origin}{\code{factor}. The type of activity at the origin location (e.g., 'home', 'work').}
\item{activity_destination}{\code{factor}. The type of activity at the destination location (e.g., 'home', 'other').}
\item{residence_province}{\code{factor}. The province of residence for the individual making the trip (e.g. 'Cuenca', 'Girona').}
\item{time_slot}{\code{integer}. The time slot during which the trip started, represented as an integer (e.g., 0, 1, 2).}
\item{distance}{\code{factor}. The distance category of the trip, represented as a code (e.g., '002-005' for 2-5 km).}
\item{n_trips}{\code{double}. The number of trips taken within the specified time slot and distance.}
\item{trips_total_length_km}{\code{double}. The total length of all trips in kilometers for the specified time slot and distance.}
\item{year}{\code{double}. The year of the trip.}
\item{month}{\code{double}. The month of the trip.}
\item{day}{\code{double}. The day of the trip.}
}

This object also contains the reference to the source DuckDB conneciton with the full view of the cached data. It can be accessed using \code{od_table$src$con}. See examples below. The connection includes two views:
\itemize{
\item \code{od_csv_raw} - a raw table view of all cached CSV files with the origin-destination data that has been previously cached in $SPANISH_OD_DATA_DIR
\item \code{od_csv_clean} - a cleaned-up table view of \code{od_csv_raw} with column names and values translated and mapped to English. This still includes all cached data.
}

View \code{od_csv_clean} has the same structure as the filtered view 'od_filtered', which is returned by \code{spod_get_od()} as a DuckDB table connection object. The view \code{od_csv_raw} has original Spanish column names and values and has the following structure:
\describe{
\item{fecha}{\code{Date}. The date of the trip, including year, month, and day.}
\item{origen}{\code{character}. The identifier for the origin location of the trip, formatted as a character string (e.g., '01001_AM').}
\item{destino}{\code{character}. The identifier for the destination location of the trip, formatted as a character string (e.g., '01001_AM').}
\item{actividad_origen}{\code{character}. The type of activity at the origin location (e.g., 'casa', 'trabajo').}
\item{actividad_destino}{\code{character}. The type of activity at the destination location (e.g., 'otros', 'trabajo').}
\item{residencia}{\code{character}. The code representing the residence of the individual making the trip (e.g., '01') according to the official INE classification.}
\item{edad}{\code{character}. The age of the individual making the trip. This data is actaully filled with 'NA' values, which is why this column is removed in the cleaned-up and translated view described above.}
\item{periodo}{\code{integer}. The time period during which the trip started, represented as an integer (e.g., 0, 1, 2).}
\item{distancia}{\code{character}. The distance category of the trip, represented as a character string (e.g., '002-005' for 2-5 km).}
\item{viajes}{\code{double}. The number of trips taken within the specified time period and distance.}
\item{viajes_km}{\code{double}. The total length of all trips in kilometers for the specified time period and distance.}
\item{day}{\code{double}. The day of the trip.}
\item{month}{\code{double}. The month of the trip.}
\item{year}{\code{double}. The year of the trip.}
}
}
\description{
This function retrieves the v1 (2020-2021) or v2 (2022 and onwards) origin-destination data for the specified dates. It checks if the requested data is already cached locally and downloads only missing files. When all the requested data is cached, it creates a \code{DuckDB} connection to the cache data folder and provides an table
}
\examples{
\dontrun{

# create a connection to the v1 data
Sys.setenv(SPANISH_OD_DATA_DIR = "~/path/to/your/cache/dir")
dates <- c("2020-02-14", "2020-03-14", "2021-02-14", "2021-02-14", "2021-02-15")
od_dist <- spod_get_od(zones = "distr", dates = dates)

# od dist is a table view filtered to the specified dates

# access the source connection with all dates
# list tables
DBI::dbListTables(od_dist$src$con)
}
}
