---
title: "Making interactive flow maps"
vignette: >
  %\VignetteIndexEntry{Making interactive flow maps}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
bibliography: references.bib
number-sections: true
format:
  html:
    toc: true
    toc-depth: 2
    code-overflow: wrap
execute: 
  eval: false
---

In this tutorial we will show how to make static flow maps with `{spanishoddata}` and `{flowmapblue}` [@flowmapblue_r]. We cover two examples. [First](#simple-example), we only use the origin-destination flows and district zones that you can get using the `{spanishoddata}` package. In the [second](#advanced-example) more advanced example we also use `{mapSpain}` and `{hexSticker}` packages to re-create the `{spanishoddata}` logo. For both examples, make sure you first go though the initial [setup steps](#setup).

# Setup {#setup}

For the basemap in the final visualisation you will need a free Mapbox access token. You can get one at [account.mapbox.com/access-tokens/](https://account.mapbox.com/access-tokens/){target='_blank'} (you need to have a Mapbox account, which is free). You may skip this step, but in this case your interative flowmap will have no basemap, and the flows will just flow on solid colour background.

Once you got the access token, you can set it in the `MAPBOX_TOKEN` environment variable like so:

```{r}
#| eval: false
Sys.setenv(MAPBOX_TOKEN = "YOUR_MAPBOX_ACCESS_TOKEN")
```


```{r}
library(spanishoddata)
library(flowmapblue)
library(tidyverse)
library(sf)
```


Choose where `{spanishoddata}` should download (and convert) the data by setting the `SPANISH_OD_DATA_DIR` environment variable with the following command:

```{r}
Sys.setenv(SPANISH_OD_DATA_DIR = "~/spanish_od_data")
```

The package will create this directory if it does not exist on the first run of any function that downloads the data.

<details><summary>Setting data directory for advanced users</summary>

To permanently set the directory for all projects, you can specify the data directory globally by setting the `SPANISH_OD_DATA_DIR` environment variable, e.g. with the following command:

```{r}
#| eval: false
usethis::edit_r_environ()
# Then set the data directory globally, by typing this line in the file:
```

```
SPANISH_OD_DATA_DIR = "~/spanish_od_data"
```

You can also set the data directory locally, just for the current project. Set the 'envar' in the working directory by editing `.Renviron` file in the root of the project:

```{r}
#| eval: false
file.edit(".Renviron")
```


</details>

# Simple example - plot flows data as it is {#simple-example}

## Get data

### Flows

Let us get the flows between `districts` for a tipycal working day `2021-04-07`:

```{r}
od_20210407 <- spod_get("od", zones = "distr", dates = "2021-04-07")

head(od_20210407)
```


```
# Source:   SQL [6 x 14]
# Database: DuckDB v1.0.0 [root@Darwin 23.6.0:R 4.4.1/:memory:]
  date       id_origin id_destination activity_origin activity_destination residence_province_in…¹ residence_province_n…² time_slot distance n_trips trips_total_length_km  year month
  <date>     <fct>     <fct>          <fct>           <fct>                <fct>                   <fct>                      <int> <fct>      <dbl>                 <dbl> <int> <int>
1 2021-04-07 01001_AM  01001_AM       home            other                01                      Araba/Álava                    0 005-010     10.5                  68.9  2021     4
2 2021-04-07 01001_AM  01001_AM       home            other                01                      Araba/Álava                    0 010-050     12.6                 127.   2021     4
3 2021-04-07 01001_AM  01001_AM       home            other                01                      Araba/Álava                    1 010-050     12.6                 232.   2021     4
4 2021-04-07 01001_AM  01001_AM       home            other                01                      Araba/Álava                    2 005-010     10.8                 102.   2021     4
5 2021-04-07 01001_AM  01001_AM       home            other                01                      Araba/Álava                    5 005-010     18.9                 156.   2021     4
6 2021-04-07 01001_AM  01001_AM       home            other                01                      Araba/Álava                    6 010-050     10.8                 119.   2021     4
# ℹ abbreviated names: ¹​residence_province_ine_code, ²​residence_province_name
# ℹ 1 more variable: day <int>
```

### Zones

We also get the district zones polygons to mathch the flows. We use version 1 for the polygons, because the selected date is in 2021, which corresponds to the v1 data (see the relevant [codebook](v1-2020-2021-mitma-data-codebook.qmd)).

```{r}
districts_v1 <- spod_get_zones("dist", ver = 1)

head(districts_v1)
```

```
Simple feature collection with 6 features and 6 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 289502.8 ymin: 4173922 xmax: 1010926 ymax: 4720817
Projected CRS: ETRS89 / UTM zone 30N (N-E)
# A tibble: 6 × 7
  id       census_districts                                              municipalities_mitma municipalities         district_names_in_v2 district_ids_in_v2                      geom
  <chr>    <chr>                                                         <chr>                <chr>                  <chr>                <chr>                     <MULTIPOLYGON [m]>
1 2408910  2408910                                                       24089                24089                  León distrito 10     2408910            (((290940.1 4719080, 290…
2 22117_AM 2210201; 2210301; 2211501; 2211701; 2216401; 2218701; 2221401 22117_AM             22102; 22103; 22115; … Graus agregacion de… 22117_AM           (((774184.4 4662153, 774…
3 2305009  2305009                                                       23050                23050                  Jaén distrito 09     2305009            (((429745 4179977, 42971…
4 07058_AM 0701901; 0702501; 0703401; 0705801; 0705802                   07058_AM             07019; 07025; 07034; … Selva agregacion de… 07058_AM           (((1000859 4415059, 1000…
5 2305006  2305006                                                       23050                23050                  Jaén distrito 06     2305006            (((429795.1 4180957, 429…
6 2305005  2305005                                                       23050                23050                  Jaén distrito 05     2305005            (((430022.7 4181101, 429…
```

## Prepare data for visualization

### Expected data format

To visualise the flows, `{flowmapblue}` expects two `data.frame`s in the following format (we use the packages's built-in data on Switzerland for illustration):

**Locations**

A `data.frame` with `id`, optional `name`, as well as `lat` and `lon` for coordinates of the locations in WGS84 (EPSG: 4326) coordinate reference system.

```{r}
str(flowmapblue::ch_locations)
```

```
'data.frame':	26 obs. of  4 variables:
 $ id  : chr  "ZH" "LU" "UR" "SZ" ...
 $ name: chr  "Zürich" "Luzern" "Uri" "Schwyz" ...
 $ lat : num  47.4 47.1 46.8 47.1 46.9 ...
 $ lon : num  8.65 8.11 8.63 8.76 8.24 ...
```

**Flows**

A `data.frame` with `origin`, `dest`, and `count` for the flows between locations, where `origin` and `dest` must match with `id`'s of the locations `data.frame` from above, and `count` is the number of trips between them.

```{r}
str(flowmapblue::ch_flows)
```


```
str(flowmapblue::ch_flows)
'data.frame':	676 obs. of  3 variables:
 $ origin: chr  "ZH" "ZH" "ZH" "ZH" ...
 $ dest  : chr  "ZH" "BE" "LU" "UR" ...
 $ count : int  66855 1673 1017 84 1704 70 94 250 1246 173 ...
```


### Aggregate data - count total flows

```{r}
od_20210407_total <- od_20210407 |>
  group_by(id_origin, id_destination) |>
  summarise(n_trips = sum(n_trips, na.rm = TRUE)) |> 
  collect() |> 
  rename(origin = id_origin, dest = id_destination, count = n_trips)

head(od_20210407_total)
```

```
origin  dest        count
  <fct>   <fct>       <dbl>
1 0704003 07051      208.  
2 0704004 07003      756.  
3 0704004 07010     1798.  
4 0704004 07023_AM     8.64
5 0704004 07038_AM   804.  
6 0704004 0704005  22144.  
```

## Create locations table with coordinates

We need the coordinates for each origin and destination. We can use the centroids of `districts_v1` polygons for that.

```{r}
districts_v1_centroids <- districts_v1 |>
  st_transform(4326) |> 
  st_centroid() |>
  st_coordinates() |>
  as.data.frame() |>
  mutate(id = districts_v1$id) |>
  rename(lon = X, lat = Y)

head(districts_v1_centroids)
```


```
         lon      lat       id
1 -5.5551053 42.59849  2408910
2  0.3260681 42.17266 22117_AM
3 -3.8136448 37.74344  2305009
4  2.8542636 39.80672 07058_AM
5 -3.8229513 37.77294  2305006
6 -3.8151096 37.86309  2305005
```

## Create the plot

Remember, what for the map to have a basemap, you need to have setup your Mapbox access token in the [setup](#setup) section of this vignette.

Create the interactive flowmap with the `flowmapblue` function. In the example below we use the `darkMode` and `clustering`, and we disable the `animation`. We do not recommend disabling the `clustering` when plotting the flows between hundreds and thousands of locations, as this will reduce the redability of the map.

```{r}
flowmap <- flowmapblue(
  locations = districts_v1_centroids,
  flows = od_20210407_total,
  mapboxAccessToken = Sys.getenv("MAPBOX_TOKEN"),
  darkMode = TRUE,
  animation = FALSE,
  clustering = TRUE
  )

flowmap
```

```{r}
#| eval: true
#| echo: false
#| results: 'asis'

# Determine if we are in pkgdown and insert gif
is_pkgdown <- Sys.getenv("IN_PKGDOWN") == "true"
if (is_pkgdown) {
  cat('![](../man/figures/flowmapblue-standard.mp4)')
} else {
  # If not in pkgdown, insert static image
  cat('![](../man/figures/flowmapblue-standard-01.png){width=50%}')
  cat('![](../man/figures/flowmapblue-standard-02.png){width=50%}')
}
```

You can play around with the arguments of the `flowmapblue` function. For example, you can turn on the `animation` mode:

```{r}
flowmap_anim <- flowmapblue(
  locations = districts_v1_centroids,
  flows = od_20210407_total,
  mapboxAccessToken = Sys.getenv("MAPBOX_TOKEN"),
  darkMode = TRUE,
  animation = TRUE,
  clustering = TRUE
  )

flowmap_anim
```


```{r}
#| eval: true
#| echo: false
#| results: 'asis'

# Determine if we are in pkgdown and insert gif
is_pkgdown <- Sys.getenv("IN_PKGDOWN") == "true"
if (is_pkgdown) {
  cat('![](../man/figures/flowmapblue-animated.mp4)')
} else {
  # If not in pkgdown, insert static image
  cat('![](../man/figures/flowmapblue-animated.png){width=100%}')
}
```
