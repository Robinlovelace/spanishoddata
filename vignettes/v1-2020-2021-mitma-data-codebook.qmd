---
title: "Codebook and cookbook for v1 (2020-2021) Spanish mobility data"
vignette: >
  %\VignetteIndexEntry{Codebook and cookbook for v1 (2020-2021) Spanish mobility data}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
execute: 
  eval: false
---

The mobility data v1 (2020-2021) was originally released by the [Ministry of Transport and Sustainable Mobility (MITMA)](https://www.transportes.gob.es/). The mobility dataset is produced by [Nommon](https://www.nommon.es/){target="_blank"} using the raw data from [Orange España](https://www.orange.es/){target="_blank"}. It provides hourly flows between zones across Spain for every day of the observation period (2020-02-14 to 2021-05-09) and number of trips per person. This document will introduce you to the available data and provide brief code snippets on how to access it using the `spanishoddata` R package.

Key sources for this codebook include: (1) [original data collection methodology](https://cdn.mitma.gob.es/portal-web-drupal/covid-19/bigdata/mitma_-_estudio_movilidad_covid-19_informe_metodologico_v3.pdf){target="_blank"}, (2) [original data codebook in Spanish](https://opendata-movilidad.mitma.es/README%20-%20formato%20ficheros%20movilidad%20MITMA%2020201228.pdf){target="_blank"}, (3) [original data download page](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudios-de-movilidad-con-big-data/estudios-de-movilidad-anteriores/covid-19/opendata-movilidad){target="_blank"}, (4) [original data license](https://opendata-movilidad.mitma.es/LICENCIA%20de%20datos%20abiertos%20del%20MITMA%2020201203.pdf){target="_blank"}, and the (5) [homepage of the open mobility data project of the Ministry of Transport and Sustainable Mobility of Spain](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudio-de-movilidad-con-big-data){target="_blank"}.

*Comment: will also add links to these PDFs auto-translated to English in DeepL*

**Note: Kindly consult the documents above for any specific detail on the methodology. The codebook here is only a simplified summary.**

To access any data in this codebook, please do the following:

Install `spanishoddata` R package:

```{r}
if (!require("remotes")) install.packages("remotes")
remotes::install_github("Robinlovelace/spanishoddata")
```

Set the cache folder for the package to download the files into. You may need up to 30 GB to download all data and another 30 GB if you would like to convert the downloaded data into analysis ready format (a `DuckDB` database file, or a folder of `parquet` files). You can find more info on this conversion in the [Converting the data for faster analysis](#convert-data).

```{r}
library(spanishoddata)
Sys.setenv(SPANISH_OD_DATA_DIR = "/path/to/your/cache/directory")
```

# 1. Spatial data with zoning boundaries

There are two levels of spatial detail available:

1.  `Districts` (2850 zones). In urban areas you get some level of detail within cities. In rural areas, one district is often equal to a municipality, but municipalities with low population are combined into larger units to preserve privacy of individuals in the dataset.

To access it:

```{r}
districts_v1 <- spod_get_zones("dist", ver = 1)
```

Data structure:

| Variable Name | **Description** |
|------------------------------------|------------------------------------|
| `id` | District `id` assigned by the data provider. Matches with `id_origin`, `id_destination`, and `id` in district level [origin-destination data](#od-data) and [trips per person data](#tpp-data). |
| `census_districts` | A list of census district identifiers as classified by the Spanish Statistical Office (INE) that are spatially bound within polygons with `id` above. |
| `municipalities_mitma` | A list of municipality identifiers as assigned by the data provider in municipality zones spatial dataset that correspond to a given district `id` . |
| `municipalities` | A list of municipality identifiers as classified by the Spanish Statistical Office (INE) that correspond to polygons with `id` above. |
| `district_names_in_v2` | A list of names of district polygons defined in the v2 version of this data that covers the year 2022 and onwards that correspond to polygons with `id` above. **TODO: insert link to v2 codebook.** |
| `district_ids_in_v2` | A list of identifiers of district polygons defined in the v2 version of this data that covers the year 2022 and onwards that correspond to polygons with `id` above. **TODO: insert link to v2 codebook.** |

2.  `Municipalities` (2205 zones). Same as above, but without any spatial detalisation in the cities.

To access it:

```{r}
municipalities_v1 <- spod_get_zones("muni", ver = 1)
```

Data structure:

| Variable Name | **Description** |
|------------------------------------|------------------------------------|
| `id` | District `id` assigned by the data provider. Matches with `id_origin`, `id_destination`, and `id` in municipality level [origin-destination data](#od-data) and [trips per person data](#tpp-data). |
| `municipalities` | A list of municipality identifiers as classified by the Spanish Statistical Office (INE) that correspond to polygons with `id` above. |
| `districts_mitma` | A list of district identifiers as assigned by the data provider in districts zones spatial dataset that correspond to a given municipality `id` . |
| `census_districts` | A list of census district identifiers as classified by the Spanish Statistical Office (INE) that are spatially bound within polygons with `id` above. |
| `municipality_names_in_v2` | A list of names of municipality polygons defined in the v2 version of this data that covers the year 2022 and onwards that correspond to polygons with `id` above. **TODO: insert link to v2 codebook.** |
| `municipality_ids_in_v2` | A list of identifiers of municipality polygons defined in the v2 version of this data that covers the year 2022 and onwards that correspond to polygons with `id` above. **TODO: insert link to v2 codebook.** |

: The spatial data you get via `spanishoddata` package is downloaded directly from the source, the geometries of polygons are automatically fixed if there are any invalid geometries. The zone identifiers are stored in `id` column. Apart from that `id` column, the the zones data does not have any metadata. TODO: add metadata from reference tables.

# 2. Mobility data

All mobility data is referenced via origin, destination, or other location identifiers with the zones described above.

## 2.1. Origin-destination data {#od-data}

The original data is stored in the [`maestra-1`](https://www.transportes.gob.es/ministerio/proyectos-singulares/estudios-de-movilidad-con-big-data/estudios-de-movilidad-anteriores/covid-19/opendata-movilidad){target="_blank"} folder with suffixes `distritos` (for district zoning) and `municipios` (for municipality zoning). We only use the `district` level data because of several data issues with the `municipality` data documented [here](http://www.ekotov.pro/mitma-data-issues/issues/011-v1-tpp-mismatch-zone-ids-in-table-and-spatial-data.html){target="_blank"} and [here](http://www.ekotov.pro/mitma-data-issues/issues/012-v1-tpp-district-files-in-municipality-folders.html){target="_blank"}, but also because the distric level data contains more columns with useful origin-destination flow characteristics. As a result, you get both the `district` level data and the `municipality` level data with the same columns. `Municipality` level data is simply a re-aggregation of `district` level data using the official relations file where `district` identifiers are mapped to `municipality` identifiers (orginal file is [`relaciones_distrito_mitma.csv`](https://opendata-movilidad.mitma.es/relaciones_distrito_mitma.csv){target="_blank"}).

To access the data, use the `spod_get_od()` function. In this example we will use a short interval of dates:

```{r}
dates <- c(start = "2020-02-14", end = "2020-02-17")
od_dist <- spod_get(type = "od", zones = "dist", dates = dates)
od_muni <- spod_get(type = "od", zones = "muni", dates = dates)
```

The data for the specified dates will be automatically downloaded and cached in the `SPANISH_OD_DATA_DIR` directory. Existing files will not be re-downloaded. The resulting objects `od_dist` and `od_muni` are `tbl_duckdb_connection`\[\^1\]. . Basically, you can treat these as regular `data.frame`s or `tibble`s. One important difference is that the data is not actually loaded into memory, because if you requested more dates, e.g. a whole month or a year, all that data would most likely not fit into your computer's memory. A `tbl_duckdb_connection` is mapped to the donwloaded CSV files that are cached on disk and the data is only loaded in small chunks as needed at the time of computation. You can manipulate `od_dist` and `od_muni` using `dplyr` functions such as `select()`, `filter()`, `mutate()`, `group_by()`, `summarise()`, etc. In the end of any sequence of commands you will need to add `collect()` to execute the whole chain and load the results into memory in an R `data.frame`/`tibble` like so:

```{r}
library(dplyr)
od_mean_hourly_trips_over_the_4_days <- od_dist |>
  group_by(time_slot) |>
  summarise(
    mean_hourly_trips = mean(n_trips, na.rm = TRUE),
    .groups = "drop") |> 
  collect()
od_mean_hourly_trips_over_the_4_days
```

```         
# A tibble: 24 × 2
   time_slot mean_hourly_trips
       <int>             <dbl>
 1        18              21.4
 2        10              19.3
 3         2              14.8
 4        15              19.8
 5        11              19.9
 6        16              19.6
 7        22              20.9
 8         0              18.6
 9        13              21.1
10        19              22.5
# ℹ 14 more rows
# ℹ Use `print(n = ...)` to see more rows
```

In this example above, we calculated a mean hourly flows over the 4 days of the observation period. The full data for all 4 days was never loaded into memory all at once. Rather the available memory of the computer was used up to its maximum limit to make that calculation happen, without ever exceeding the available memory limit. This is done transparantly to the user with the help of `DuckDB`\[https://duckdb.org/\] \[\^2\]. The same summary operation can be done with the entire dataset for the full 18 month on a regular laptop with 8-16 GB memory. It will take a bit of time to complete, but it will be done. To speed things up, we will also demonstrate in the end of the document, how the data can be converted to more efficient formats

\[2\]: Specifically, with [{duckdb} R package](https://r.duckdb.org/index.html){target="_blank"}.

Here are the variables you can find in both the `district` and `municipality` level origin-destination data:

| **English Variable Name** | **Original Variable Name** | **Description** |
|------------------|------------------|-----------------------------------|
| `date` | `fecha` | The date of the recorded data, formatted as `YYYY-MM-DD`. |
| `id_origin` | `origen` | The origin zone identifier, recoded from original zone codes. |
| `id_destination` | `destino` | The destination zone identifier, recoded from original zone codes. |
| `activity_origin` | `actividad_origen` | The type of activity at the origin zone, recoded from `casa`, `otros`, `trabajo_estudio` to `home`, `other`, `work_or_study` respectively. |
| `activity_destination` | `actividad_destino` | The type of activity at the destination zone, similarly recoded as for `activity_origin`. |
| `residence_province_ine_code` | `residencia` | The province code of residence, converted to INE standardized codes. |
| `residence_province_name` | Derived from `residencia` | The full name of the residence province, derived from the province code. |
| `time_slot` | `periodo` | The time slot during which the trips occurred, represented as an integer. |
| `distance` | `distancia` | The distance range of the trip, categorized into specific intervals such as `002-005` (2 to 5 km), `100+` (more than 100 km), etc. |
| `n_trips` | `viajes` | The number of trips recorded for that specific origin-destination pair and time slot. |
| `trips_total_length_km` | `viajes_km` | The total length of trips in kilometers, summing up all trips between the origin and destination zones. |
| `year` | `year` | The year of the recorded data, extracted from the date. |
| `month` | `month` | The month of the recorded data, extracted from the date. |
| `day` | `day` | The day of the recorded data, extracted from the date. |
| `n_persons` | `personas` | The number of persons making the trips, used in the context of trip distribution by person. |
| `n_trips_by_person` | `numero_viajes` | The number of trips per person, categorized into `0`, `1`, `2`, or `2+` trips. |
| `id` | `distrito` | The identifier for the district or zone, used in some views to connect the trip data with geographical areas. |
| `municipality_id` | `municipio_mitma` | The identifier for municipalities, used for aggregating data to the municipal level, typically derived from district data. |

## 2.2. Trips per person data {#tpp-data}

# Converting the data for faster analysis {#convert-data}
